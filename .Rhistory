lm(formula = age ~ balance)
Residuals:
Min      1Q  Median      3Q     Max
-17.114  -5.591  -2.145   2.448  43.137
datalm<-lm(age~balance)
summary(datalm)
Call:
lm(formula = age ~ balance)
Residuals:
Min      1Q  Median      3Q     Max
-17.114  -5.591  -2.145   2.448  43.137
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)  24.1907     0.4212  57.438   <2e-16 ***
crim         -0.4209     0.0454  -9.271   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Residual standard error: 8.781 on 509 degrees of freedom
Multiple R-squared:  0.1445,	Adjusted R-squared:  0.1428
F-statistic: 85.94 on 1 and 509 DF,  p-value: < 2.2e-16
bank_full_trainlm<-lm(age~balance)
summary(bank_full_trainlm)
Call:
lm(formula = age ~ balance)
bank_full_trainlm<-lm(age~balance)
summary(bank_full_trainlm)
Call:
lm(formula = age ~ balance)
Residuals:
Min      1Q  Median      3Q     Max
-17.114  -5.591  -2.145   2.448  43.137
# Generate random IQ values with mean = 30 and sd =2
IQ <- rnorm(40, 30, 2)
# Sorting IQ level in ascending order
IQ <- sort(IQ)
# Generate vector with pass and fail values of 40 students
result <- c(0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 1, 1, 0, 0, 1, 0,
0, 0, 1, 0, 0, 1, 1, 0, 1, 1,
1, 1, 1, 0, 1, 1, 1, 1, 0, 1)
# Data Frame
df <- as.data.frame(cbind(IQ, result))
# Print data frame
print(df)
# output to be present as PNG file
png(file="LogisticRegressionGFG.png")
# Plotting IQ on x-axis and result on y-axis
plot(IQ, result, xlab = "IQ Level",
ylab = "Probability of Passing")
# Create a logistic model
g = glm(result~IQ, family=binomial, df)
# Create a curve based on prediction using the regression model
curve(predict(g, data.frame(IQ=x), type="resp"), add=TRUE)
# This Draws a set of points
# Based on fit to the regression model
points(IQ, fitted(g), pch=30)
# Summary of the regression model
summary(g)
# saving the file
dev.off()
# Generate random IQ values with mean = 30 and sd =2
IQ <- rnorm(40, 30, 2)
# Sorting IQ level in ascending order
IQ <- sort(IQ)
# Generate vector with age and balance values of 40 ID
result <- c(0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 1, 1, 0, 0, 1, 0,
0, 0, 1, 0, 0, 1, 1, 0, 1, 1,
1, 1, 1, 0, 1, 1, 1, 1, 0, 1)
# Data Frame
df <- as.data.frame(cbind(IQ, result))
# Print data frame
print(df)
# output to be present as PNG file
png(file="LogisticRegressionGFG.png")
# Plotting IQ on x-axis and result on y-axis
plot(IQ, result, xlab = "IQ Level",
ylab = "Probability of age")
# Create a logistic model
g = glm(result~IQ, age=balance, df)
# Create a curve based on prediction using the regression model
curve(predict(g, data.frame(IQ=x), type="resp"), add=TRUE)
# This Draws a set of points
# Based on fit to the regression model
points(IQ, fitted(g), pch=30)
# Summary of the regression model
summary(g)
# saving the file
dev.off()
# Generate random IQ values with mean = 30 and sd =2
IQ <- rnorm(40, 30, 2)
# Sorting IQ level in ascending order
IQ <- sort(IQ)
# Generate vector with age and balance values of 40 ID
result <- c(0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 1, 1, 0, 0, 1, 0,
0, 0, 1, 0, 0, 1, 1, 0, 1, 1,
1, 1, 1, 0, 1, 1, 1, 1, 0, 1)
# Data Frame
df <- as.data.frame(cbind(IQ, result))
# Print data frame
print(df)
# output to be present as PNG file
png(file="LogisticRegressionGFG.png")
# Plotting IQ on x-axis and result on y-axis
plot(IQ, result, xlab = "IQ Level",
ylab = "Probability of age")
# Create a logistic model
g = glm(result~IQ, age=balance, df)
# Create a curve based on prediction using the regression model
curve(predict(g, data.frame(IQ=x), type="resp"), add=TRUE)
# This Draws a set of points
# Based on fit to the regression model
points(IQ, fitted(g), pch=30)
# Summary of the regression model
summary(g)
# saving the file
bank_full_train()
# Generate random IQ values with mean = 30 and sd =2
IQ <- rnorm(40, 30, 2)
# Sorting IQ level in ascending order
IQ <- sort(IQ)
# Generate vector with age and balance values of 40 ID
result <- c(0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 1, 1, 0, 0, 1, 0,
0, 0, 1, 0, 0, 1, 1, 0, 1, 1,
1, 1, 1, 0, 1, 1, 1, 1, 0, 1)
# Data Frame
df <- as.data.frame(cbind(IQ, result))
# Print data frame
print(df)
# output to be present as PNG file
png(file="LogisticRegressionGFG.png")
# Plotting IQ on x-axis and result on y-axis
plot(IQ, result, xlab = "IQ Level",
ylab = "Probability of age")
# Create a logistic model
g = glm(result~IQ, age=balance, df)
# Create a curve based on prediction using the regression model
curve(predict(g, data.frame(IQ=x), type="resp"), add=TRUE)
# This Draws a set of points
# Based on fit to the regression model
points(IQ, fitted(g), pch=30)
# Summary of the regression model
summary(g)
# saving the file
bank_full_train()
# Generate random IQ values with mean = 30 and sd =2
IQ <- rnorm(40, 30, 2)
# Sorting IQ level in ascending order
IQ <- sort(IQ)
# Generate vector with age and balance values of 40 ID
result <- c(0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 1, 1, 0, 0, 1, 0,
0, 0, 1, 0, 0, 1, 1, 0, 1, 1,
1, 1, 1, 0, 1, 1, 1, 1, 0, 1)
# Data Frame
df <- as.data.frame(cbind(IQ, result))
# Print data frame
print(df)
# output to be present as PNG file
png(file="LogisticRegressionGFG.png")
# Plotting IQ on x-axis and result on y-axis
plot(IQ, result, xlab = "IQ Level",
ylab = "Probability of age")
# Create a logistic model
g = glm(result~IQ, age=balance, df)
# Create a curve based on prediction using the regression model
curve(predict(g, data.frame(IQ=x), type="resp"), add=TRUE)
# This Draws a set of points
# Based on fit to the regression model
points(IQ, fitted(g), pch=30)
# Summary of the regression model
summary(g)
# Generate random IQ values with mean = 30 and sd =2
IQ <- rnorm(40, 30, 2)
# Sorting IQ level in ascending order
IQ <- sort(IQ)
# Generate vector with age and balance values of 40 ID
result <- c(0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
1, 0, 0, 0, 1, 1, 0, 0, 1, 0,
0, 0, 1, 0, 0, 1, 1, 0, 1, 1,
1, 1, 1, 0, 1, 1, 1, 1, 0, 1)
# Data Frame
df <- as.data.frame(cbind(IQ, result))
# Print data frame
print(df)
# output to be present as PNG file
png(file="LogisticRegressionGFG.png")
# Plotting IQ on x-axis and result on y-axis
plot(IQ, result, xlab = "IQ Level",
ylab = "Probability of age")
# Create a logistic model
g = glm(result~IQ, age=balance, df)
# Create a curve based on prediction using the regression model
curve(predict(g, data.frame(IQ=x), type="resp"), add=TRUE)
# This Draws a set of points
# Based on fit to the regression model
points(IQ, fitted(g), pch=30)
# Summary of the regression model
summary(g)
age <- c(45,34,40,58,59)
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
print(relation)
age <- c(45,34,40,58,59)
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
print(summary(relation))
# The predictor vector.
age <- c(45,34,40,58,59)
# The resposne vector.
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
# Find age  with balance 300
a <- data.frame(x = 300)
result <-  predict(relation,a)
print(result)
# Create the predictor and response variable.
age <- c(45,34,40,58,59)
balance <- c(2,0,311,5810,169)
relation <- lm(balance~age)
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "balance & age Regression",
abline(lm(age~balance)),cex = 1.3,pch = 16,xlab = "balance in rs",ylab = "age in yrs")
# Save the file.
dev.off()
predict(object, newdata)
# The predictor vector.
age <- c(45,34,40,58,59)
# The resposne vector.
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
predict(object, newdata)
# The predictor vector.
age <- c(45,34,40,58,59)
# The resposne vector.
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
# Find age  with balance 300
a <- data.frame(x = 300)
result <-  predict(relation,a)
print(result)
x<-bank_full_train$age
y<-bank_full_train$balance
plot(x,y,main="plot",xlab="age",ylab="balance",pch=19,frame=FALSE)
plot(x,y,main="plot",xlab="age",ylab="balance",pch=19,frame=FALSE)
abline(lm(y~x,bank_full_train=bank.full.test,col="blue"))
x<-bank_full_train$age
y<-bank_full_train$balance
plot(x,y,main="plot",xlab="age",ylab="balance",pch=19,frame=FALSE)
plot(x,y,main="plot",xlab="age",ylab="balance",pch=19,frame=FALSE)
abline(lm(y~x,bank_full_train=bank_full_train,col="blue"))
# The predictor vector.
age <- c(45,34,40,58,59)
# The resposne vector.
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "age & balance Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "balance in rs",ylab = "age in yrs")
# The predictor vector.
age <- c(45,34,40,58,59)
# The resposne vector.
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "age & balance Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "balance in rs",ylab = "age in yrs")
library(corrplot)
corrplot(bank_full_train.cor)
#summary provides a quick snapshot into the data set
summary(bank_full_train)
#Get the level of factor variable
levels(bank_full_train$job)
table(bank_full_train$job)
plot(table(bank_full_train$job))
# Create data for the graph of age
v <- c(45, 34, 40, 58, 59, 36, 34, 38, 52, 48)
# Create the histogram one set
hist(v, xlab = "age", col = "green",
border = "black", xlim = c(0, 100),
ylim = c(0, 10), breaks = 10)
# Creating the histogram 2 variable
hist(v, xlab = "age", ylab ="id",
xlim = c(0, 100),
col = "darkmagenta", border = "pink",
breaks = c(0, 40,50,60,65,80,100,120))
plot(age, balance)                                   # Apply plot function
abline(lm(balance ~ age), col = "red")               # Draw regression line
plot(age, balance)
with(bank_full_train, plot(age, balance))
#apply sactter plot
with(bank_full_train, plot(age, balance))
#apply plot function
plot(age, balance)
#draw regression line
abline(lm(balance ~ age), col = "red")
with(bank_full_train, plot(age, balance))
#apply plot function
plot(age, balance)
#draw regression line
abline(lm(balance ~ age), col = "red")
dim(bank_full_train)
x<-bank_full_train[,1:13]
x
plot(x,col="blue")
plot(x,col="blue")
plot(age,col="blue")
plot(age,col="blue")
x<-bank_full_train[,1:13]
x
plot(age,col="blue")
plot(age,col="blue")
plot(duration,col="blue")
View(bank_full_train)
plot(balance,col="blue")
plot(ID,col="blue")
plot(age,col="blue")
y<-bank_full_train[,14]
y
plot(y,col="red")
plot(x,col="blue")
plot(x,col="blue")
x<-bank_full_train[,1:13]
x
plot(x,col="blue")
y<-bank_full_train[,14]
y
plot(y,col="red")
x<-bank_full_train[,1:13]
x
plot(x,col="blue")
x<-bank_full_train[,1:15]
x
plot(x,col="blue")
#plot
x<-bank_full_train[,1:1]
x
plot(x,col="blue")
#plot
x<-bank_full_train[,1:14]
x
plot(x,col="blue")
age<-bank_full_train[,1:14]
age
plot(age,col="blue")
y<-bank_full_train[,14]
y
plot(y,col="red")
balance<-bank_full_train[,14]
balance
plot(balance,col="red")
plot
age<-bank_full_train[,1:14]
age
plot(age,col="blue")
#plot
age<-bank_full_train[,1:13]
age
plot(age,col="blue")
Accuracy testing
confusionMatrix(pred,as.factor(test$balace))
myctrl = trainControl(method = "cv", number = 10)
#libraries
library(e1071)
library(ggplot2)
library(reshape2)
library(caTools)
myctrl = trainControl(method = "cv", number = 10)
#libraries
library(e1071)
library(ggplot2)
library(reshape2)
library(caTools)
library(ggplot2)
ggplot(train,aes(y=y,x=score,color=factor(y)))+
geom_point()+geom_jitter()
ggplot(train,aes(y=y,x=score,color=factor(y)))+
bank_full_train()+bank.full.test()
library(ggplot2)
ggplot(train,aes(y=y,x=score,color=factor(y)))+
bank_full_train()+bank.full.test()
#view of data
view(bank_full_train)
library(readxl)
bank_full_train <- read_excel("C:/Users/91742/OneDrive/R mini project/bank_full_train.csv")
View(bank_full_train)
#summary provides a quick snapshot into the data set
summary(bank_full_train)
#Create Relationship Model & get the Coefficients
age <- c(45,34,40,58,59)
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
print(relation)
#prediction
predict(object, newdata)
# The predictor vector.
age <- c(45,34,40,58,59)
# The resposne vector.
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
# Find age  with balance 300
a <- data.frame(x = 300)
result <-  predict(relation,a)
print(result)
#univariate plots
dim(bank_full_train)
#plot
age<-bank_full_train[,1:13]
age
plot(age,col="blue")
#apply sactter plot
with(bank_full_train, plot(age, balance))
#apply plot function
plot(age, balance)
#view of data
view(bank_full_train)
#what kind of dataset has been created
## It is a data frame with variables
str(bank_full_train)
#Create Relationship Model & get the Coefficients
age <- c(45,34,40,58,59)
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
print(relation)
#Create Relationship Model & get the Coefficients
age <- c(45,34,40,58,59)
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
print(relation)
# Apply the lm() function.
relation <- lm(balance~age)
print(summary(relation)) #accuracy test
# Apply the lm() function.
relation <- lm(balance~age)
print(summary(relation)) #accuracy test
#prediction
predict(object, newdata)
# The predictor vector.
age <- c(45,34,40,58,59)
#prediction
predict(object, newdata)
# The predictor vector.
age <- c(45,34,40,58,59)
# The resposne vector.
balance <- c(2,0,311,5810,169)
# Apply the lm() function.
relation <- lm(balance~age)
# Find age  with balance 300
a <- data.frame(x = 300)
result <-  predict(relation,a)
print(result)
#Creating input vector for lm() function
age <- c(45,34,40,58,59)
balance <- c(2,0,311,5810,169)
relation <- lm(balance~age)
# Plotting the chart.
plot(y,x,col = "red",main = "age and balance Regression",abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "balance in rs",ylab = "age in yrs")
# Saving the file.
dev.off()
# Plotting the chart.
plot(y,x,col = "red",main = "age and balance Regression",abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "balance in rs",ylab = "age in yrs")
# Saving the file.
dev.off()
# Giving a name to the chart file.
png(file = "linear_regression.png")
# Plotting the chart.
plot(y,x,col = "red",main = "age and balance Regression",abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "balance in rs",ylab = "age in yrs")
# Saving the file.
dev.off()
#apply sactter plot
with(bank_full_train, plot(age, balance))
#apply plot function
plot(age, balance)
#draw regression line
abline(lm(balance ~ age), col = "red")
#univariate plots
dim(bank_full_train)
#plot
age<-bank_full_train[,1:13]
age
plot(age,col="blue")
#apply sactter plot
with(bank_full_train, plot(age, balance))
balance<-bank_full_train[,14]
balance
plot(balance,col="red")
bank_full_train = read.csv("C:\Users\91742\OneDrive")
bank_full_train = read.csv("C:/Users/91742/OneDrive")
bank_full_train = read.csv("C:/Users/91742/OneDrive")
bank_full_train = read.csv("C:/Users/91742/OneDrive/R mini project")
setwd("C:/Users/91742/OneDrive/R mini project")
bank_full_train = read.csv("C:/Users/91742/OneDrive/R mini project")
bank_full_train = read.csv("C:/Users/91742/OneDrive/R mini project/bank_full_train.csv")
